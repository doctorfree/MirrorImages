#!/bin/bash
#
# Usage: ./Install [package names]
#   If no package names are specified then all currently
#   supported packages will be installed
#
# Versions of apt prior to 1.1 do not support install by Debian filename
# You should probably be running a more recent version of apt
# On these early versions, install with the following:
#
# sudo dpkg -i "${DEB}"
# sudo apt-get install -f

SRC_NAME="MirrorImages"
PKG_NAMES="ImagesPortrait ArtistsPortrait CountriesPortrait \
           ModelsPortrait PhotographersPortrait TantraTutorial \
           JavPortrait ImagesLandscape ArtistsLandscape \
           CountriesLandscape ModelsLandscape \
           PhotographersLandscape JavLandscape"
APT_NAMES="images-portrait artists-portrait countries-portrait \
           models-portrait photographers-portrait tantra-tutorial \
           jav-portrait images-landscape artists-landscape \
           countries-landscape models-landscape \
           photographers-landscape jav-landscape"
SRC="${HOME}/src"

PKG_INSTALLED=
PKG_AVAILABLE=
PKG_SELECTED=

[ -f "${SRC}/${SRC_NAME}/VERSION" ] || {
  echo "Missing VERSION file: ${SRC}/${SRC_NAME}/VERSION"
  echo "Exiting"
  exit 1
}

. "${SRC}/${SRC_NAME}/VERSION"
PKG_VER=${VERSION}
PKG_REL=${RELEASE}

get_available_packages() {
  for pkgs in ${SRC}/${SRC_NAME}/releases/${PKG_VER}-${PKG_REL}/*.${SUF}
  do
    [ "${pkgs}" == "${SRC}/${SRC_NAME}/releases/${PKG_VER}-${PKG_REL}/*.${SUF}" ] || {
      for pkg in ${pkgs}
      do
        pkgname=`basename ${pkg} | sed -e "s/_${PKG_VER}-${PKG_REL}.${SUF}//"` 
        PKG_AVAILABLE="${PKG_AVAILABLE} ${pkgname}"
      done
    }
  done
  PKG_AVAILABLE=`echo $PKG_AVAILABLE | sed -e "s/^ //"`
}

get_installed_packages() {
  for pkg in ${APT_NAMES}
  do
    dpkg -s ${pkg} | grep Status: | grep 'ok installed' > /dev/null && {
      case "${pkg}" in
        "images-landscape")
            PKG_INSTALLED="${PKG_INSTALLED} ImagesLandscape"
            ;;
        "artists-landscape")
            PKG_INSTALLED="${PKG_INSTALLED} ArtistsLandscape"
            ;;
        "countries-landscape")
            PKG_INSTALLED="${PKG_INSTALLED} CountriesLandscape"
            ;;
        "models-landscape")
            PKG_INSTALLED="${PKG_INSTALLED} ModelsLandscape"
            ;;
        "photographers-landscape")
            PKG_INSTALLED="${PKG_INSTALLED} PhotographersLandscape"
            ;;
        "jav-landscape")
            PKG_INSTALLED="${PKG_INSTALLED} JavLandscape"
            ;;
        "jav-portrait")
            PKG_INSTALLED="${PKG_INSTALLED} JavPortrait"
            ;;
        "images-portrait")
            PKG_INSTALLED="${PKG_INSTALLED} ImagesPortrait"
            ;;
        "artists-portrait")
            PKG_INSTALLED="${PKG_INSTALLED} ArtistsPortrait"
            ;;
        "countries-portrait")
            PKG_INSTALLED="${PKG_INSTALLED} CountriesPortrait"
            ;;
        "models-portrait")
            PKG_INSTALLED="${PKG_INSTALLED} ModelsPortrait"
            ;;
        "photographers-portrait")
            PKG_INSTALLED="${PKG_INSTALLED} PhotographersPortrait"
            ;;
        "tantra-tutorial")
            PKG_INSTALLED="${PKG_INSTALLED} TantraTutorial"
            ;;
       esac
    }
  done
  PKG_INSTALLED=`echo $PKG_INSTALLED | sed -e "s/^ //"`
}

check_package_names() {
  for nam in ${PKG_NAMES}
  do
    echo "${PKG_NAMES}" | grep ${nam} > /dev/null || {
      echo "${nam} is not a valid package name. Skipping installation of ${nam}"
      PKG_NAMES=`echo "${PKG_NAMES}" | sed -e "s/${nam}//"`
    }
  done
}

debian=
have_apt=`type -p apt`
have_dpkg=`type -p dpkg`
have_rpm=`type -p rpm`
have_yum=`type -p yum`
[ -f /etc/os-release ] && . /etc/os-release
[ "${ID_LIKE}" == "debian" ] && debian=1
[ "${debian}" ] || [ -f /etc/debian_version ] && debian=1

SUF=deb
[ "${debian}" ] || SUF=rpm

get_available_packages
[ "$PKG_AVAILABLE}" ] || {
  echo "No packages for version ${PKG_VER}-${PKG_REL} are currently available. Exiting."
  exit 1
}

install_selected() {
  for pkg in ${PKG_AVAILABLE}
  do
    while true
    do
      read -p "Install ${pkg} ? ('Y'/'N'): " yn
      case $yn in
          [Yy]*)
              PKG_SELECTED="${PKG_SELECTED} $pkg"
              break
              ;;
          [Nn]*)
              break
              ;;
          * )
              echo "Please answer yes or no."
              ;;
      esac
    done
  done
  PKG_SELECTED=`echo $PKG_SELECTED | sed -e "s/^ //"`
}

YES=
[ "$1" ] && {
  # If invoked with -i argument, present a menu of options to select from
  if [ "$1" == "-i" ]
  then
    shift
    PKG_NAMES="$*"
    check_package_names
    get_installed_packages
    [ "${PKG_INSTALLED}" ] && {
      echo "Currently installed MirrorImages packages:"
      echo ""
      for instpkg in ${PKG_INSTALLED}
      do
        echo "$instpkg"
      done
      echo ""
    }
    [ "${PKG_AVAILABLE}" ] && {
      echo "Currently available MirrorImages packages:"
      echo ""
      for avaipkg in ${PKG_AVAILABLE}
      do
        echo "$avaipkg"
      done
      echo ""
    }
    while true
    do
      PS3="${BOLD}Please enter your desire (numeric or text): ${NORMAL}"
      options=("Install All" "Install Selected" "Quit")
      select opt in "${options[@]}"
      do
        case "$opt,$REPLY" in
            "Install All",*|*,"Install All")
                PKG_NAMES="${PKG_AVAILABLE}"
                break 2
                ;;
            "Install Selected",*|*,"Install Selected")
                install_selected
                PKG_NAMES="${PKG_SELECTED}"
                break 2
                ;;
            "Quit",*|*,"Quit"|"quit",*|*,"quit")
                printf "\nExiting\n"
                exit 0
                ;;
        esac
      done
    done
  else
    if [ "$1" == "-y" ]
    then
      YES="-y"
      shift
      [ "$1" ] && PKG_NAMES="$*"
    else
      PKG_NAMES="$*"
    fi
  fi
  check_package_names
}

[ "${PKG_NAMES}" ] || {
  echo "No valid Package names specified. Exiting."
  exit 1
}

for PKG_NAME in ${PKG_NAMES}
do
  PKG="${SRC}/${SRC_NAME}/releases/${PKG_VER}/${PKG_NAME}_${PKG_VER}-${PKG_REL}.${SUF}"
  [ -f "${PKG}" ] || {
    echo "${PKG_NAME}_${PKG_VER}-${PKG_REL}.${SUF} not found."
    for pkgs in ${SRC}/${SRC_NAME}/releases/*/${PKG_NAME}_*.${SUF}
    do
      [ "${pkgs}" == "${SRC}/${SRC_NAME}/releases/*/${PKG_NAME}_*.${SUF}" ] || {
        echo "Found existing packages:"
        echo "${pkgs}"
      }
    done
    echo ""
    continue
  }

  echo "Installing ${PKG}"
  if [ "${debian}" ]
  then
    if [ "${have_apt}" ]
    then
      sudo apt ${YES} install ${PKG}
    else
      if [ "${have_dpkg}" ]
      then
        sudo dpkg -i ${PKG}
      else
        sudo apt ${YES} install ${PKG}
      fi
    fi
  else
    if [ "${have_yum}" ]
    then
      sudo yum ${YES} install ${PKG}
    else
      if [ "${have_rpm}" ]
      then
        sudo rpm -i ${PKG}
      else
        sudo dnf ${YES} install ${PKG}
      fi
    fi
  fi
done
